<div class="row mb-2">
  <div class="col-6">{{>breadcrumb title='Edit'}}</div>
  <div class="col-6 d-flex justify-content-end">
    <div class="col-6 mx-2">
      <input
        id="deleteId"
        type="text"
        class="form-control"
        placeholder="{{this.id}}"
        name="deleteId"
        required
      />
    </div>
    <a id="deleteButton" href="#" type="button" class="btn btn-danger align-self-center disabled">
      <i class="bi bi-trash"></i> Delete</i>
    </a>
  </div>
</div>

<div class="row">
  <div class="col-3 form-floating">
    <input
      type="text"
      class="form-control"
      id="floatingId"
      placeholder="Id"
      name="id"
      value="{{this.id}}"
      readonly
    />
    <label class="px-4" for="floatingId">Id</label>
  </div>
  <div class="col-3 form-floating">
    <input
      type="text"
      class="form-control"
      id="floatingChannel"
      placeholder="Channel"
      name="channel"
      value="{{this.channel}}"
      readonly
    />
    <label class="px-4" for="floatingChannel">Channel</label>
  </div>
  <div class="col-2 form-floating">
    <input
      type="text"
      class="form-control"
      id="floatingStatus"
      placeholder="Status"
      name="status"
      value="{{this.exitStatus}}"
      readonly
    />
    <label class="px-4" for="floatingStatus">Status</label>
  </div>
  <div class="col-2 form-floating">
    <input
      type="text"
      class="form-control"
      id="floatingPosition"
      placeholder="Position"
      name="position"
      value="{{this.position}}"
      readonly
    />
    <label class="px-4" for="floatingPosition">Position</label>
  </div>
  <div class="col-2 form-floating">
    <input
      type="text"
      class="form-control"
      id="floatingTrigger"
      placeholder="Trigger"
      name="trigger"
      value="{{this.maxTriggerPosition}}"
      readonly
    />
    <label class="px-4" for="floatingTrigger">Stream</label>
  </div>
</div>

<div id="stats" class="row mx-1 my-3">
</div>

{{> alert}}

<form class="row my-5" method="post" action="/edit">
  {{> sub-form edit=true}}
</form>

<script>
  const delId = document.getElementById("deleteId");
  const delBtn = document.getElementById("deleteButton");
  delId.onkeyup = (ev) => {
    const enable = delId.value === '{{this.id}}';
    enable 
      ? delBtn.classList.remove("disabled")
      : delBtn.classList.add("disabled")
  }
  delBtn.onclick = () => {
    fetch("/delete/{{this.id}}", { method: "post" })
      .then(response => response.json())
      .then(json => {
        if(json.deleted) document.location = "/";
        else delId.value = "";
      })
      .catch(()=> delId.value = "")
  }

  const statusInput = document.getElementById("floatingStatus");
  const positionInput = document.getElementById("floatingPosition");
  const triggerInput = document.getElementById("floatingTrigger");
  const statsDiv = document.getElementById("stats");
  const refresh = (state) => {
    const events = state.events.map(({ name, ok, errors, ignored }) => {
      const okSpan = ok ? `<span class="badge bg-success">${ok}</span>` : "";
      const errorsSpan = errors ? `<span class="badge bg-danger">${errors}</span>` : "";
      const ignoredSpan = ignored ? `<span class="badge bg-secondary">${ignored}</span>` : ""; 
      return `
        <button type="button" class="btn btn-sm position-relative">
          ${name} 
          ${okSpan}
          ${errorsSpan}
          ${ignoredSpan}
        </button>
      `;
    }).join('');

    statusInput.value = state.exitStatus || "Running";
    positionInput.value = state.position;
    triggerInput.value = state.maxTriggerPosition;

    const toggleIcon = state.active ? "bi-toggle-on" : "bi-toggle-off";
    const toggleTitle = state.active ? "Stop" : "Start";

    statsDiv.innerHTML=`
    <div class="card p-0">
      <div class="card-header p-2">
        <h5 class="card-title m-0">
          <a href="/toggle/${state.id}" title=${toggleTitle}
            type="button"
            class="btn btn-lg p-0"><i class="bi ${toggleIcon} text-${state.color}"></i>
          </a>
          <small class="text-muted">${state.error || state.exitStatus || "Running" }</small>
        </h5> 
      </div>
      <div class="card-body">
        ${events}
      </div>
    </div>`
  }

  const es = new EventSource(`/monitor/{{this.id}}`);
  es.onmessage = ({ data }) => {
    const props = JSON.parse(data);
    refresh(props);
  };
  
  es.onerror = (error) => {
    console.error(error);
  };

  refresh({{{json this}}});
</script>