{{>subscription-bc crumb='Subscriptions Graph'}}

<div id="graph" class="row"></div>

<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script>
    const { rows } = {{{json this}}};
    const COLORS = {
        secondary: "#c0c0c0",
        success: "#198754",
        warning: "#ffc107",
        danger: "#dc3545"
    };
    const color = (row) => COLORS[row.active ? row.endpointStatus.color : "secondary"];
    
    const links = rows.map(row => Object.create({
        id: row.id,
        source: row.producer,
        target: row.consumer,
        color: color(row),
        position: row.active ? row.position : ""
    }));

    const ids = {};
    links.forEach(link => {
        link.source = ids[link.source] || (ids[link.source] = link.source);
        link.target = ids[link.target] || (ids[link.target] = link.target);
    });
    const nodes = Object.keys(ids).map(id => ({ id }));

    const simulation = d3.forceSimulation(nodes)
        .force("charge", d3.forceManyBody().strength(-300))
        .force("link", d3.forceLink(links).id(d => d.id))
        .force("center", d3.forceCenter())
        .stop();

    const graph = document.getElementById("graph");
    let width = graph.offsetWidth, height = window.innerHeight - 200;
    const svg = d3.select("div#graph").append("svg").attr("height", height);

    const R = 30, D = 2 * R;
    const drag = d3.drag()
        .on("start", function({ active }, d) {
            !active && simulation.alphaTarget(0.3).restart();
            d3.select(this).classed("active", true);
            d.fx = d.x;
            d.fy = d.y;
        })
        .on("drag", function({x, y}, d) {
            d.fx = Math.max(D, Math.min(width - D, x));
            d.fy = Math.max(D, Math.min(height - D, y));
        })
        .on("end", function({ active }, d) {
            !active && simulation.alphaTarget(0);
            d3.select(this).classed("active", false);
            d.fx = null;
            d.fy = null;
        });

    svg.append("defs").selectAll("marker")
        .data(["arrow"]).enter()
        .append("marker")
        .attr("id", "arrow")
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 42)
        .attr("refY", -4)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
        .style("fill", "#6c757d")
        .append("path")
        .attr("d", "M0,-5L10,0L0,5");

    const link = svg.append("g").selectAll("g")
        .data(links).enter()
        .append("g")
        .attr("id", d => `link-${d.id}`)
        .style("stroke", d => d.color)
        .attr("class", "link");

    const path = link.append("path")
        .attr("id", d => `path-${d.id}`)
        .attr("marker-end", "url(#arrow)")
    link.append("text")
        .attr("dy", -3)
        .append("textPath")
        .attr("id", d => `last-event-${d.id}`)
        .attr("xlink:href", d => `#path-${d.id}`)
    link.append("text")
        .attr("dy", 8)
        .append("textPath")
        .attr("id", d => `position-${d.id}`)
        .attr("xlink:href", d => `#path-${d.id}`)
        .attr("startOffset", 33)
        .text(d => d.position);  

    const node = svg.append("g").selectAll("g")
        .data(nodes).enter()
        .append("g")
        .attr("transform", `translate(${width/2},${height/2})`)
        .call(drag);
    node.append("circle").attr("r", R);
    node.append("text")
        .attr("x", d => -Math.min(R, R * d.id.length / 11))
        .attr("y", 3)
        .text(d => d.id.length <= 10 ? d.id : d.id.substring(0, 10) + "\u22ef");

    simulation.on("tick", () => {
        node.attr("transform", d => {
            const x = Math.max(D, Math.min(width - D, d.x));
            const y = Math.max(D, Math.min(height - D, d.y));
            return `translate(${x},${y})`
        });
        path.attr("d", d => {
            const sx = Math.max(D, Math.min(width - D, d.source.x));
            const sy = Math.max(D, Math.min(height - D, d.source.y));
            const tx = Math.max(D, Math.min(width - D, d.target.x));
            const ty = Math.max(D, Math.min(height - D, d.target.y));
            const r = Math.hypot(tx - sx, ty - sy);
            return `M${sx},${sy}A${r},${r} 0 0,1 ${tx},${ty}`;
        });
     });

    const refresh = () => {
        clearTimeout(window.resizing);
        window.resizing = setTimeout(() => {
            simulation.stop();
            width = graph.offsetWidth;
            height = window.innerHeight - 200;
            svg.attr("height", height);
            simulation.force("center").x(width/2).y(height/2);
            simulation.force("link").distance(Math.min(width, height) / 3);
            simulation.alpha(1).restart();
        }, 250);
    }
    window.onresize = refresh;

    const animate = async (state) => {
        const { id, position, lastEventName } = state;

        d3.select(`#link-${id}`).style("stroke", color(state));

        d3.select(`#position-${id}`).text(position)
            .interrupt()
            .style("font-size", "150%")
            .transition()
            .duration(2000)
            .style("font-size", "100%");

        d3.select(`#last-event-${id}`).text(lastEventName)
            .interrupt()
            .attr("startOffset", "0%")
            .transition()
            .duration(2000)
            .attr("startOffset", "150%");
    };

    const connect = () => {
        const es = new EventSource("/_monitor-all");
        es.onmessage = ({ data }) => {
            const props = JSON.parse(data);
            animate(props);
        };
        es.onerror = (error) => {
            console.error("sse error... retrying...");
            setTimeout(connect, 3000);
        };
    }

    refresh();
    connect();
</script>