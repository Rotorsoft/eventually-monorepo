{{>subscription-bc crumb='Subscriptions Graph'}}

<div id="graph" class="row"></div>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>
    const { rows } = {{{json this}}};
    const links = rows.map(row => ({
        source: row.producer,
        target: row.consumer,
        color: row.active ? row.endpointStatus.color : "secondary"
    }));

    const nodes = {};

    // Compute the distinct nodes from the links.
    links.forEach(link => {
        link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
        link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
    });

    const graph = document.getElementById("graph");
    const svg = d3.select("div#graph").append("svg");

    const force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .gravity(0.01)
        .charge(-300);

    svg.append("defs").selectAll("marker")
        .data(["secondary", "success", "danger"]).enter()
        .append("marker")
        .attr("id", (d) => `arrow-${d}`)
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 42)
        .attr("refY", -2)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
        .attr("class", (d) => d)
        .append("path")
        .attr("d", "M0,-5L10,0L0,5");

    const path = svg.append("g").selectAll("path")
        .data(force.links()).enter()
        .append("path")
        .attr("class", (d) => `link ${d.color}`)
        .attr("marker-end", (d) => `url(#arrow-${d.color})`);

    const circle = svg.append("g").selectAll("circle")
        .data(force.nodes()).enter()
        .append("circle")
        .attr("r", 30)
        .attr("transform", `translate(${(graph.offsetWidth-100)/2},${(window.innerHeight-200)/2})` )
        .call(force.drag);

    const text = svg.append("g").selectAll("text")
        .data(force.nodes()).enter()
        .append("text")
        .attr("x", (d) => -Math.min(30, 30*d.name.length/11))
        .attr("y", 3)
        .text((d) => d.name.length <= 10 ? d.name : d.name.substring(0, 10) + "\u22ef");

    const linkArc = (d) => {
        const dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            r = Math.sqrt(dx * dx + dy * dy);
        return `M${d.source.x},${d.source.y}A${r},${r} 0 0,1 ${d.target.x},${d.target.y}`;
    }

    // Use elliptical arc path segments to doubly-encode directionality.
    const tick = () => {
        path.attr("d", linkArc);
        circle.attr("transform", d => `translate(${d.x},${d.y})`);
        text.attr("transform", d => `translate(${d.x},${d.y})`);
    }
    force.on("tick", tick);

    const refresh = () => {
        const width = graph.offsetWidth - 100;
        const height = window.innerHeight - 200;
        graph.style.height = height;
        svg.attr("height", height);
        force.size([width, height]);
        force.linkDistance(Math.min(width, height) / 3)
        force.start();
    }
    window.onresize = refresh;
    refresh();
</script>